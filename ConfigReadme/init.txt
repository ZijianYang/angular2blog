配置应用程序

1、在VS Code中，在根文件夹（angular2-quickstart）下，创建.vscode子文件夹。
2、在.vscode子文件夹下，创建settings.json文件：
// 将设置放入此文件中以覆盖默认值和用户设置。
settings.json是VS Code的用户设置文件，可以设置，编辑器的字体、颜色等
"typescript.tsdk": "node_modules/typescript/lib"，指出Angular 2的开发库
"files.exclude": ts 项目, 隐藏 .js 和 .js.map 文件
{
    "typescript.tsdk": "node_modules/typescript/lib",

    // ts 项目, 隐藏 .js 和 .js.map 文件
    "files.exclude": {
        "node_modules": true,
        "**/*.js": { "when": "$(basename).ts" },
        "**/*.js.map": true
    }

}
3、在.vscode子文件夹下，创建tasks.json文件：
"command": "cmd"，命令方式
"isShellCommand": true，是否使用命令行方式
"showOutput": "always"，输出显示
"args": ["/C npm start"]，命令参数
{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "0.1.0",
    "command": "cmd",
    "isShellCommand": true,
    "showOutput": "always",
    "args": ["/C npm start"]
}
4.在.vscode子文件夹下，创建launch.json
launch.json用于Debug调试选项配置
"version": 版本号
"name"："Attach to Chrome, with sourcemaps" 附加到Chrome,带映射信息
"type": "chrome"，启用谷歌chrome浏览器
"request": "launch"，发送到浏览器
"request": "attach"，附加到浏览器
"port": 9222，端口号
"sourceMaps": true，源码映射
"webRoot": "${workspaceRoot}"，根路径
{
    "version": "0.2.0",
    "configurations": [{
            "name": "Launch Chrome against localhost, with sourcemaps",
            "type": "chrome",
            "request": "launch",
            "url": "http://localhost:8080/index.html",
            "sourceMaps": true,
            "webRoot": "${workspaceRoot}"
        },
        {
            "name": "Attach to Chrome, with sourcemaps",
            "type": "chrome",
            "request": "attach",
            "port": 9222,
            "sourceMaps": true,
            "webRoot": "${workspaceRoot}"
        }
    ]
}

5.根目录 package.json

{
    "name": "angular-quickstart",//项目名称
    "version": "1.0.0",//版本
    "scripts": {
        "start": "tsc && concurrently \"tsc -w\" \"lite-server\" ",//用于启动测试服务器，启动的过程中执行了编译、检测文件修改、启动服务器等任务。
        "lite": "lite-server",
        "postinstall": "typings install",//用于在npm install完成以后执行，下载TypeScript类型定义文件。
        "tsc": "tsc",
        "tsc:w": "tsc -w",//编译TypeScript文件，并且是以’watch’模式启动，也就是检测文件修改，如果有TypeScript文件被修改，自动执行编译过程。
        "typings": "typings"
    },
    "license": "ISC",//开源许可
    "dependencies": {//可选字段，指示当前包所依赖的其他包。
        "@angular/common": "~2.0.2",
        "@angular/compiler": "~2.0.2",
        "@angular/core": "~2.0.2",
        "@angular/forms": "~2.0.2",
        "@angular/http": "~2.0.2",
        "@angular/platform-browser": "~2.0.2",
        "@angular/platform-browser-dynamic": "~2.0.2",
        "@angular/router": "~3.0.2",
        "@angular/upgrade": "~2.0.2",
        "angular-in-memory-web-api": "~0.1.5",
        "bootstrap": "^3.3.7",
        "core-js": "^2.4.1",
        "reflect-metadata": "^0.1.8",
        "rxjs": "5.0.0-beta.12",
        "systemjs": "0.19.39",
        "zone.js": "^0.6.25"
    },
    "devDependencies": {//如果有人计划在他们的项目中下载和使用你的模块，但他们可能并不想或并不需要你开发所使用的外部测试和文档框架。在这种情况下，最好将这些附加的项放在devDependencies中。
        "concurrently": "^3.1.0",
        "lite-server": "^2.2.2",
        "typescript": "^2.0.3",
        "typings": "^1.4.0"
    }
}

6.根目录 typings.json
{//VS Code 使用Typings添加自动补全（用于智能提示）
    "globalDependencies": {
        "core-js": "registry:dt/core-js#0.0.0+20160725163759",
        "jasmine": "registry:dt/jasmine#2.2.0+20160621224255",
        "node": "registry:dt/node#6.0.0+20160909174046"
    }
}